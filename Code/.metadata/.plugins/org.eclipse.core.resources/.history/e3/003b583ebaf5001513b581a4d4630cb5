import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;


public class TestClass {

	public static void main(String[] args) throws Exception {
		CreateAttributes();
	}
	
	public static void MFMTest() throws IOException {
		String outFileName = "MFMTest.csv";
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File("C:/Users/SDM/Documents/Parking Spotter/MFMTest.csv")));
		Location topLeft = new Location(33.780616, -84.369343);
		Location bottomRight = new Location( 33.773479, -84.364688);
		String MFMfilename = "C:/Users/SDM/Documents/Parking Spotter/AtlantaParking.csv";
		MFMparkCheck mfm = new MFMparkCheck(MFMfilename);
		for (double lat = bottomRight.lat; lat < topLeft.lat; lat += 0.00005) {
			for (double lon = topLeft.lon; lon < bottomRight.lon; lon += 0.00005) {
				bw.append(lat + "," + lon);
				if (mfm.isValidParking(lat, lon)) {
					bw.append("," + "1");
				} else {
					bw.append("," + "2");
				}
				bw.append("\n");
			}
		}
		bw.close();
	}

	public static void MFMTest2() throws IOException {
		String inFileName = "C:/Users/SDM/Documents/Parking Spotter/TestPoints.csv";
		String outFileName = "C:/Users/SDM/Documents/Parking Spotter/MFMTest.csv";
		String MFMfilename = "C:/Users/SDM/Documents/Parking Spotter/AtlantaParking.csv";
		Scanner scan = new Scanner(new File(inFileName));
		BufferedWriter bwMaps = new BufferedWriter(new FileWriter(new File(outFileName)));
		BufferedWriter bwResults = new BufferedWriter(new FileWriter(new File(outFileName)));
		MFMparkCheck mfm = new MFMparkCheck(MFMfilename);
		double correct = 0;
		double FP = 0;
		double FN = 0;
		double total = 0;
		while (scan.hasNext()) {
			String[] data = scan.nextLine().split(",");
			double lat = Double.parseDouble(data[0]);
			double lon = Double.parseDouble(data[1]);
			boolean valid = Boolean.parseBoolean((data[2]));
			bwMaps.append(lat + "," + lon);
			boolean validTest = mfm.isValidParking(lat, lon);
			//write map data
			if (valid && validTest) {
				bwMaps.append("," + "1");
				correct++;
			} else if (!valid && !validTest) {
				bwMaps.append("," + "2");
				correct++;
			} else if (valid && !validTest) {
				FN++;
				bwMaps.append("," + "3");
			} else if (!valid && validTest) {
				FP++;
				bwMaps.append("," + "4");
			}
			bwMaps.append("\n");
			total++;
		}
		System.out.println("correct = " + correct/total*100);
		System.out.println("False Positive = " + FP/total*100);
		System.out.println("False Negative = " + FN/total*100);
		scan.close();
		bwMaps.close();
		bwResults.close();
	}
	
	public static double MFMTestAccuracy(MFMparkCheck mfm) throws IOException {
		String inFileName = "C:/Users/SDM/Documents/Parking Spotter/TestPoints.csv";
		Scanner scan = new Scanner(new File(inFileName));
		double correct = 0;
		double FP = 0;
		double FN = 0;
		double total = 0;
		while (scan.hasNext()) {
			String[] data = scan.nextLine().split(",");
			double lat = Double.parseDouble(data[0]);
			double lon = Double.parseDouble(data[1]);
			boolean valid = Boolean.parseBoolean((data[2]));
			boolean validTest = mfm.isValidParking(lat, lon);
			//write map data
			if (valid && validTest) {
				correct++;
			} else if (!valid && !validTest) {
				correct++;
			} else if (valid && !validTest) {
				FN++;
			} else if (!valid && validTest) {
				FP++;
			}
			total++;
		}
		

		scan.close();
		return correct/total;
	}
	
	public static void RandomHillClimb(double iterations) throws IOException {
		String MFMfilename = "C:/Users/SDM/Documents/Parking Spotter/AtlantaParking.csv";
		String inFileName = "C:/Users/SDM/Documents/Parking Spotter/TestPoints.csv";
		Scanner scan = new Scanner(new File(inFileName));
		Random rand = new Random();
		double maxDist, thresh, norm;
		int maxDistBound = 50; //m
		int threshBound = 100;
		int normBound = 100;
		int decimal = 3;
		int factor = (int) Math.pow(10,decimal);
		MFMparkCheck mfm = new MFMparkCheck(MFMfilename);
		double lastPerformance = -1;
		double performance = 0;
		for (int i = 0; i < iterations; i ++) {
			maxDist = rand.nextInt(maxDistBound*factor)/factor;
			thresh = rand.nextInt(threshBound*factor)/factor;
			norm = rand.nextInt(normBound*factor)/factor;
			
			mfm.setParameters(maxDist, thresh, norm);
			performance = MFMTestAccuracy(mfm);
			

			//Get best neighbor
			for (int j = -1/factor; j < 2/factor; j+=1/factor) {
				for (int k = -1/factor; k < 2/factor; k+=1/factor) {
					for (int z = -1/factor; z < 2/factor; z+=1/factor) {
						
					}
				}
			}
			
		}
	}
	
	public static void bruteforceOpt() throws IOException {
		String MFMfilename = "C:/Users/SDM/Documents/Parking Spotter/AtlantaParking.csv";
		String inFileName = "C:/Users/SDM/Documents/Parking Spotter/TestPoints.csv";
		double maxDist, thresh, norm;
		MFMparkCheck mfm = new MFMparkCheck(MFMfilename);
		double bestPerformance = -1;
		double bestDist = -1;
		double bestThresh = -1;
		double bestnorm = -1;
		double performance;
		int i = 0;
		//Get best neighbor
		for (maxDist = 0; maxDist < 10; maxDist += .1) {
			for (thresh = 0; thresh < 20; thresh += 1) {
				for (norm = 0; norm < 25; norm += .5) {
					mfm.setParameters(maxDist, thresh, norm);
					performance = MFMTestAccuracy(mfm);
					i++;
					scan.reset();
					System.out.println(i + ": " +performance);
					if (performance > bestPerformance) {
						bestPerformance = performance;
						bestDist = maxDist;
						bestThresh = thresh;
						bestnorm = norm;
					}
				}
			}
		}
		System.out.println("performance: " + bestPerformance);
		System.out.println("bestDist: " + bestDist);
		System.out.println("bestThresh: " + bestThresh);
		System.out.println("bestnorm: " + bestnorm);
	}
	
	public static void CreateAttributes() throws IOException {
		String inFileName = "C:/Users/SDM/Documents/Parking Spotter/TestPoints.csv";
		String outFileName = "C:/Users/SDM/Documents/Parking Spotter/parkingAttributes.csv";
		String MFMfilename = "C:/Users/SDM/Documents/Parking Spotter/AtlantaParking.csv";
		MFMparkCheck mfm = new MFMparkCheck(MFMfilename);
		Scanner scan = new Scanner(new File(inFileName));
		BufferedWriter bw = new BufferedWriter(new FileWriter(new File(outFileName)));
		while (scan.hasNext()) {
			String[] data = scan.nextLine().split(",");
			double lat = Double.parseDouble(data[0]);
			double lon = Double.parseDouble(data[1]);
			boolean valid = Boolean.parseBoolean((data[2]));
			Location query = new Location(lat,lon);
			NearestNeighbors nn20 = new NearestNeighbors(mfm.getNearestNeighbors(query, 20),query);
			NearestNeighbors nn7 = new NearestNeighbors(mfm.getNearestNeighbors(query, 7),query);
			bw.append(nn20.size()+","+nn7.size()+","+nn7.averageDistance()+","+nn7.varianceDistance()+","+nn7.varianceHeading()+","+valid+"\n");
		}
		bw.close();
		scan.close();
	}
}

